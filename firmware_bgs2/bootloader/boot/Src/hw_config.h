/* Define to prevent recursive inclusion -------------------------------------*/
#ifndef __HW_CONFIG_H__
#define __HW_CONFIG_H__

#include "stm32f10x.h"
#include <stdint.h>

#define PAGE_SIZE                         (0x400)    /* 2 Kbyte */
#define FLASH_SIZE                        (0x20000)  /* 256 KBytes */

#define ApplicationAddress    0x8003000
#define EEPROM_START_ADDRESS ((uint32_t)(0x8060000 - PAGE_SIZE*2)) /* EEPROM emulation start address: after 64KByte of used Flash memory */

#define CONFIG_AREA_SIZE		2048
#define CONFIG_AREA_START ((uint32_t)(0x08000000 + FLASH_SIZE - PAGE_SIZE*(CONFIG_AREA_SIZE/PAGE_SIZE)))		

//ACC
#define AVLIO1_PORT			GPIOA	
#define AVLIO1_PIN			GPIO_IDR_IDR0
#define GET_AVLIO1_PIN 	(AVLIO1_PORT->IDR & AVLIO1_PIN)
//TRIC
#define AVLIO2_PORT			GPIOA	
#define AVLIO2_PIN			GPIO_IDR_IDR1
#define GET_AVLIO2_PIN 	(AVLIO2_PORT->IDR & AVLIO2_PIN)
//SOS
#define AVLIO3_PORT			GPIOB	
#define AVLIO3_PIN			GPIO_IDR_IDR5
#define GET_AVLIO3_PIN 	(AVLIO3_PORT->IDR & AVLIO3_PIN)
//MICROWAVE SIGNAL
#define AVLIO4_PORT			GPIOB
#define AVLIO4_PIN			GPIO_IDR_IDR14
#define GET_AVLIO4_PIN 	(AVLIO4_PORT->IDR & AVLIO4_PIN)
//PWR_INT
#define AVLIO5_PORT			GPIOB 
#define AVLIO5_PIN			GPIO_IDR_IDR7
#define GET_AVLIO5_PIN 	(AVLIO5_PORT->IDR & AVLIO5_PIN)

//GPS_EN 
#define GPS_EN_PORT	GPIOC
#define GPS_EN_PIN							GPIO_BSRR_BS9
#define GET_GPS_EN_PIN 					(GPS_EN_PORT->IDR & GPS_EN_PIN)
#define GPS_EN_PIN_SET_OUTPUT		GPS_EN_PORT->CRH	&= ~(GPIO_CRH_MODE9 | GPIO_CRH_CNF9); GPS_EN_PORT->CRH	|= GPIO_CRH_MODE9_0
#define GPS_EN_PIN_SET_INPUT		GPS_EN_PORT->CRH	&= ~(GPIO_CRH_MODE9 | GPIO_CRH_CNF9);
#define GPS_EN_PIN_SET					GPS_EN_PORT->BSRR = GPS_EN_PIN
#define GPS_EN_PIN_CLR					GPS_EN_PORT->BRR = GPS_EN_PIN
#define GPS_EN_GET()						(GPIOC->IDR & GPIO_BSRR_BS9)


#define U1V8_PORT	GPIOA	
#define U1V8_PIN		GPIO_BSRR_BS15
#define U1V8_PIN_SET_OUTPUT	U1V8_PORT->CRH	&= ~(GPIO_CRH_MODE15 | GPIO_CRH_CNF15); U1V8_PORT->CRH	|= (GPIO_CRH_MODE15_0 | GPIO_CRH_CNF15_0) 
#define U1V8_PIN_SET_INPUT		U1V8_PORT->CRH	&= ~(GPIO_CRH_MODE15 | GPIO_CRH_CNF15); U1V8_PORT->CRH	|=  GPIO_CRH_CNF15_0
#define U1V8_PIN_SET					U1V8_PORT->BSRR = U1V8_PIN
#define U1V8_PIN_CLR					U1V8_PORT->BRR = U1V8_PIN


#define RS232_PORT	GPIOB	
#define RS232_PIN		GPIO_BSRR_BS9
#define RS232_PIN_SET_OUTPUT	RS232_PORT->CRH	&= ~(GPIO_CRH_MODE9 | GPIO_CRH_CNF9); RS232_PORT->CRH	|= (GPIO_CRH_MODE9_0 ) 
#define RS232_PIN_SET_INPUT		RS232_PORT->CRH	&= ~(GPIO_CRH_MODE9 | GPIO_CRH_CNF9); RS232_PORT->CRH	|=  GPIO_CRH_CNF9_0
#define RS232_PIN_SET					RS232_PORT->BSRR = RS232_PIN
#define RS232_PIN_CLR					RS232_PORT->BRR = RS232_PIN

/*
	PRIORITY CONFIG
*/
#define CAMERA_PRIORITY				2
#define GPS_PRIORITY					2
#define GSM_PRIORITY  				1
#define RTC_ALARM_PRIORITY		1
#define TICK_PRIORITY 				1
#define RTCALARM_PRIORITY 		4
#define MODEMRI_PRIORITY 			4
#define TMR2_PRIORITY					4
#define USB_WAKEUP_PRIORITY		4
#define ACCL_PRIORITY					4
#define SOS_PRIORITY					4
#define ACC_PRIORITY					4
#define ADC_PRIORITY					4
#define RF_PRIORITY						4
#define SPEED_PRIORITY				1
#define GPS_PULSE_PRIORITY		1
#define BUZZER_PROORITY				1
#define USB_IRQ_PRIORITY			4

#define ALARM_TIME		300//5min


#define ACC_IS_ON	(!ioStatus.din[0].bitNew)
#define ACC_GET_STATUS ioStatus.din[0].bitNew

//extern led_type	ledCtr;	

#define TIMER_PERIOD	1	//ms

#define ENABLE_CLK_LED_PORT	RCC->APB2ENR |= RCC_APB2ENR_IOPBEN
#define LED_PORT	GPIOB
#define LED_PIN	GPIO_BSRR_BS14
#define LED_SET_OUTPUT	LED_PORT->CRH	&= ~(GPIO_CRH_MODE14 | GPIO_CRH_CNF14); LED_PORT->CRH	|= (GPIO_CRH_MODE14_0)
#define LED_SET_INPUT		LED_PORT->CRH	&= ~(GPIO_CRH_MODE14 | GPIO_CRH_CNF14); LED_PORT->CRH	|= (GPIO_CRH_CNF14_0)
#define LED_PIN_SET					LED_PORT->BSRR = LED_PIN
#define LED_PIN_CLR					LED_PORT->BRR = LED_PIN
#define LED_ON_TIME_DFG	(500 / TIMER_PERIOD) /*1s */
#define LED_OFF_TIME_DFG	(500 / TIMER_PERIOD) /*1s */
#define LED_TURN_ON	IO_TURN_ON
#define LED_TURN_OFF IO_TURN_OFF



#define LED_SYS_R_PORT	GPIOB
#define LED_SYS_R_PIN	GPIO_BSRR_BS3
#define LED_SYS_R_SET_OUTPUT	LED_SYS_R_PORT->CRL	&= ~(GPIO_CRL_MODE3 | GPIO_CRL_CNF3); LED_SYS_R_PORT->CRL	|= (GPIO_CRL_MODE3_0)
#define LED_SYS_R_SET_INPUT		LED_SYS_R_PORT->CRL	&= ~(GPIO_CRL_MODE3 | GPIO_CRL_CNF3); LED_SYS_R_PORT->CRL	|= (GPIO_CRL_CNF3_0)
#define LED_SYS_R_PIN_SET					LED_SYS_R_PORT->BSRR = LED_SYS_R_PIN
#define LED_SYS_R_PIN_CLR					LED_SYS_R_PORT->BRR = LED_SYS_R_PIN

#define LED_SYS_G_PORT	GPIOB
#define LED_SYS_G_PIN	GPIO_BSRR_BS4
#define LED_SYS_G_SET_OUTPUT	LED_SYS_G_PORT->CRL	&= ~(GPIO_CRL_MODE4 | GPIO_CRL_CNF4); LED_SYS_G_PORT->CRL	|= (GPIO_CRL_MODE4_0)
#define LED_SYS_G_SET_INPUT		LED_SYS_G_PORT->CRL	&= ~(GPIO_CRL_MODE4 | GPIO_CRL_CNF4); LED_SYS_G_PORT->CRL	|= (GPIO_CRL_CNF4_0)
#define LED_SYS_G_PIN_SET					LED_SYS_G_PORT->BSRR = LED_SYS_G_PIN
#define LED_SYS_G_PIN_CLR					LED_SYS_G_PORT->BRR = LED_SYS_G_PIN


#define LED_GPS_R_PORT	GPIOC
#define LED_GPS_R_PIN	GPIO_BSRR_BS2
#define LED_GPS_R_SET_OUTPUT	LED_GPS_R_PORT->CRL	&= ~(GPIO_CRL_MODE2 | GPIO_CRL_CNF2); LED_GPS_R_PORT->CRL	|= (GPIO_CRL_MODE2_0)
#define LED_GPS_R_SET_INPUT		LED_GPS_R_PORT->CRL	&= ~(GPIO_CRL_MODE2 | GPIO_CRL_CNF2); LED_GPS_R_PORT->CRL	|= (GPIO_CRL_CNF2_0)
#define LED_GPS_R_PIN_SET					LED_GPS_R_PORT->BSRR = LED_GPS_R_PIN
#define LED_GPS_R_PIN_CLR					LED_GPS_R_PORT->BRR = LED_GPS_R_PIN


#define LED_GPS_G_PORT	GPIOC
#define LED_GPS_G_PIN	GPIO_BSRR_BS3
#define LED_GPS_G_SET_OUTPUT	LED_GPS_G_PORT->CRL	&= ~(GPIO_CRL_MODE3 | GPIO_CRL_CNF3); LED_GPS_G_PORT->CRL	|= (GPIO_CRL_MODE3_0)
#define LED_GPS_G_SET_INPUT		LED_GPS_G_PORT->CRL	&= ~(GPIO_CRL_MODE3 | GPIO_CRL_CNF3); LED_GPS_G_PORT->CRL	|= (GPIO_CRL_CNF3_0)
#define LED_GPS_G_PIN_SET					LED_GPS_G_PORT->BSRR = LED_GPS_G_PIN
#define LED_GPS_G_PIN_CLR					LED_GPS_G_PORT->BRR = LED_GPS_G_PIN


#define LED_3G_R_PORT	GPIOB
#define LED_3G_R_PIN	GPIO_BSRR_BS12
#define LED_3G_R_SET_OUTPUT	LED_3G_R_PORT->CRH	&= ~(GPIO_CRH_MODE12 | GPIO_CRH_CNF12); LED_3G_R_PORT->CRH	|= (GPIO_CRH_MODE12_0)
#define LED_3G_R_SET_INPUT		LED_3G_R_PORT->CRH	&= ~(GPIO_CRH_MODE12 | GPIO_CRH_CNF12); LED_3G_R_PORT->CRH	|= (GPIO_CRH_CNF12_0)
#define LED_3G_R_PIN_SET					LED_3G_R_PORT->BSRR = LED_3G_R_PIN
#define LED_3G_R_PIN_CLR					LED_3G_R_PORT->BRR = LED_3G_R_PIN


#define LED_3G_G_PORT	GPIOB
#define LED_3G_G_PIN	GPIO_BSRR_BS13
#define LED_3G_G_SET_OUTPUT	LED_3G_G_PORT->CRH	&= ~(GPIO_CRH_MODE13 | GPIO_CRH_CNF13); LED_3G_G_PORT->CRH	|= (GPIO_CRH_MODE13_0)
#define LED_3G_G_SET_INPUT		LED_3G_G_PORT->CRH	&= ~(GPIO_CRH_MODE13 | GPIO_CRH_CNF13); LED_3G_G_PORT->CRH	|= (GPIO_CRH_CNF13_0)
#define LED_3G_G_PIN_SET					LED_3G_G_PORT->BSRR = LED_3G_G_PIN
#define LED_3G_G_PIN_CLR					LED_3G_G_PORT->BRR = LED_3G_G_PIN


						
typedef struct {
	uint8_t bitOld;
	uint8_t bitNew;
	uint8_t highCnt;
	uint8_t lowCnt;
	uint8_t newUpdate;
}IOFilterType;

typedef struct {
	uint32_t updateCnt;
	IOFilterType din[5]; // {ACC,LOW_ACT,SOS,POWER_IN}
}IOstatusType;


extern IOstatusType  ioStatus;

typedef enum{
	SYS_INIT = 0xA5A5,
	SYS_DEINIT = 0x5A5A,
	SYS_OK = 0
}SYS_STATUS;


void IO_Control(uint32_t time);
void IO_Init(void);

#endif  /*__HW_CONFIG_H*/

